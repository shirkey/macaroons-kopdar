Distributed Web Security with Macaroons
KopDar Python Meetup
21 Jun 2014

Shirkey
dev@shirkey.me
@shirkeydev

* SCOPE

text

- About

- *Concepts*

    Data Security
    User Security

- *Methods*

*** Client
*** Server (Standalone)
*** Server (Distributed)

* Test

.html ./index.html

* ABOUT

*Purpose*
- Overview of macaroons for secure web applications
- Where they fit in the security ecosystem
- How you can begin using them today

*Agenda*
- Quick Review of Security Concepts

*Me:*

.image img/gravatar.jpeg

@shirkeydev loves Macaroons :)

* Aspects of Security

*DATA*ASPECTS*

- *Confidentiality* - _access_control_lists_
- *Integrity* - _hashes,_checksums_
- *Availability* - _backups,_disaster_recovery_

*USER*ASPECTS*

- *Authentication* - _identify_users_
- *Authorization* - _credentials,_permissions_
- *Accounting* - _audit_trail,_logging_

We will be focusing exclusively on *Authentication* and *Authorization* in this discussion

* Authentication

* Authentication Factors

*Something*you*know*

- _userid/password_
- _PIN_number_

*Something*you*have*

- _smart_card_/_certificate_/_ *bearer*tokens*
- _handphone_via_SMS/inbound_call_

*Something*you*are*

- _fingerprint_,_iris_scan_
- _CAPTCHA_

*Two-factor*authentication* = any two of these methods used in combination

* Successful Authentication => Authorization Credentials

After authentication, the user is provided *credentials* for authorization on successive requests

Common web credential schemes include:

- *Certificates*
- *Cookies*
- *Tokens*
- *Macaroons*

* Credential Schemes

* Credentials: Public-Key Certificates

- ...

Pros: 

- agreed upon format
- established certificate authorities

Cons:

- administration overhead -- installation and portability
- non-zero cost
- certificate revocation (see Heartbleed )

http://digital-era.net/certificate-revocations-shoot-up-in-wake-of-openssl-heartbleed-bug/

* Credentials: HTTP Cookies

Web service creates and provides a unique session id as a cookie to the client,
session state is maintained on server until token expiration (optional)

Pros: 

- simple
- lightweight

Cons:

- cookies cannot be easily validated between domains

* Credentials: Tokens

Pros:
- use either cookies or other storage mechanism (localStorage/sessionStorage) 
TODO: confirm this
- can be shared across domains, useful for third party authentication/authorization
- implementations: OAuth, SAML, roll-your-own

Cons:
- multiple standards still in draft: JWT, JWS

More Info:

.link http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19
.link http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-26

* Credentials: Macaroons

- a distributed approach to bearer tokens

Pros:

same benefits as tokens, plus:

- delegation
- contraint authorization

Cons:

- channels for third party authentication a la OAuth / SAML are not yet defined

* Macaroons

* Macaroons: Overview

Developed by Google team led by ...

Provides for a simpler distributed bearer token with

- Third-party authentication methods
- Flexible authorization (constrain access at the identity, resources)

Implementation available today for Debian using libmacaroons

Python bindings -- that's why we are here!

* References

https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
