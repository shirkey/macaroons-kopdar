Distributed Web Security with Macaroons
KopDar Python Meetup
21 Jun 2014

Shirkey
dev@shirkey.me
@shirkeydev

* SCOPE

text

- About

- *Concepts*

    Data Security
    User Security

- *Methods*

*** Client
*** Server (Standalone)
*** Server (Distributed)

* ABOUT

*Purpose*
- Overview of macaroons for secure web applications
- Where they fit in the security ecosystem
- How you can begin using them today

*Agenda*
- Quick Review of Security Concepts

*Me:*

@shirkeydev loves Macaroons :)

* Aspects of Security

*DATA*ASPECTS*

- *Confidentiality* - _access_control_lists_
- *Integrity* - _hashes,_checksums_
- *Availability* - _backups,_disaster_recovery_

*USER*ASPECTS*

- *Authentication* - _identify_users_
- *Authorization* - _credentials,_permissions_
- *Accounting* - _audit_trail,_logging_

We will be focusing exclusively on *Authentication* and *Authorization* in this discussion

* Authentication

* Authentication Factors

*Something*you*know*

- _userid/password_
- _PIN_number_

*Something*you*have*

- _smart_card_/_certificate_/_ *bearer*tokens*
- _handphone_via_SMS/inbound_call_

*Something*you*are*

- _fingerprint_,_iris_scan_
- _CAPTCHA_

*Two-factor*authentication* = any two of these methods used in combination

* Successful Authentication => Authorization Credentials

After authentication, the user is provided *credentials* for authorization on successive requests

Common credential schemes found on the web include:

- *Certificates*
- *Cookies*
- *Tokens*

* Credential Schemes

* Credentials: Public-Key Certificates

- ...

Pros: 

- agreed upon format
- established certificate authorities

Cons:

- administration overhead -- installation and portability
- non-zero cost
- certificate revocation (see Heartbleed )

http://digital-era.net/certificate-revocations-shoot-up-in-wake-of-openssl-heartbleed-bug/

* Credentials: HTTP Cookies

Web service creates and provides a unique session id as a cookie to the client,
session state is maintained on server until token expiration (optional)

Pros: 

- simple
- lightweight

Cons:

- cookies cannot be easily validated between domains

* Credentials: Tokens
Distributed credentials in the cloud that can be shared between users and services

*Macaroons* are token credentials using HMAC signing

Pros:
- use cookies or other storage mechanism (localStorage/sessionStorage) client-side
- can be shared across clients and domains, useful for distributed authorization

Cons:
- Macaroons are not alone: multiple standards still in draft (JWT, JWS)

More Info:

.link http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19

.link http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-26

* Credentials: Macaroons
<b>hello</b>
- a distributed approach to bearer tokens

Pros:

same benefits as tokens, plus:

- delegation
- contraint authorization

Cons:

- channels for third party authentication a la OAuth / SAML are not yet defined

* Macaroons

* Macaroons: Overview

Developed by Google Research team

Provides for a simple distributed bearer token with
- Delegation
- Contextual Caveats

* Macaroons: Delegation
- Support for third-party authentication methods
- Flexible authorization (constrain access at the identity, resources)

* Macaroons: Contextual Caveats
- Attenuation / constraint of original macaroon
- Two types of constraint: first-party and third-party

- We will only be discussing first-party

* Macaroons: Implementations:

- available today for Debian/Ubuntu using libmacaroons
- Python and Go bindings -- that's why we are here!

.link https://github.com/rescrv/libmacaroons

* Macaroons: Demo

* Demo Scenario (Problem)

We want to create a special KopDar members-only area on the Python ID website.

This area will allow KopDar members to posted messages and photos from the meetups.

Of course, KopDar members will occasionally want to share this material to friends and family members who *really* love Python as much as they do, but could not attend the KopDar meetups.

* Demo Scenario (Solution)

Using macaroons, we will provide credential tokens to access content for all KopDar members as well as a link for those items to be shared publicly in limited ways via contextual caveats -- ie. a limited time period

Our demo will be minimal (no authentication, text content only) and will highlight some interesting aspects of macaroons

* Installing libmacaroons

.play installing.sh /START OMIT/,/END OMIT/

* Macaroon Arguments

.play ./create_the_token.py /START 1 OMIT/,/END 1 OMIT/

* Macaroon Instance

.play ./create_the_token.py /START 2 OMIT/,/END 2 OMIT/

* KopDar Server (without authorization)

.play ./run_kopdar_server.py /START 1 OMIT/,/END 1 OMIT/


* References

.link https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
